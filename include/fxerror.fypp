#:mute

#:def handle_error_type(errortype, errorvar, code, *args)
  #:assert len(args) == 0 or len(args) == 1
  block
    type(${errortype}$), allocatable :: ${errorvar}$
    $:code
    #:if len(args)
      if (allocated(error)) then
        $:args[0]
        call ${errorvar}$%deactivate()
      end if
    #:endif
  end block
#:enddef
    

#:def handle_error_class(errorclass, errorvar, code, **kwargs)
  block
    class(${errorclass}$), allocatable :: ${errorvar}$
    $:code
    if (allocated(${errorvar}$)) then
      select type (${errorvar}$)
      #:for errclass, handlercode in kwargs.items()
        class is (${errclass}$)
          $:handlercode
      #:endfor
      end select
      call ${errorvar}$%deactivate()
    end if
  end block
#:enddef


#:def propagate_error(errorvar)
  if (allocated(${errorvar}$)) then
    return
  end if
#:enddef


#:def raise_error(errorvar, *args)
  allocate(${errorvar}$)
  call init(${errorvar}$, ${", ".join(args)}$)
  return
#:enddef

#:endmute
