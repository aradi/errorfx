#:mute

#:def catch_error(errorvar, handlercode)
  if (allocated(${errorvar}$)) then
    call ${errorvar}$%deactivate()
    block
      $:handlercode
    end block
    deallocate(${errorvar}$)
  end if
#:enddef


#:def catch_error_class(errorvar, **errorclasses)
  if (allocated(${errorvar}$)) then
    block
      logical :: errorfx_handled
      errorfx_handled = .true.
      select type (${errorvar}$)
      #:for errorclass, handlercode in errorclasses.items()
        class is (${errorclass}$)
          call ${errorvar}$%deactivate()
          $:handlercode
      #:endfor
      class default
        errorfx_handled = .false.
      end select
      if (errorfx_handled) then
        deallocate(${errorvar}$)
      end if
    end block
  end if
#:enddef


#:def propagate_error(errorvar)
  if (allocated(${errorvar}$)) then
    return
  end if
#:enddef


#:def throw_error(errorvar, **argdict)
  #:set arglist = ", ".join(["{}={}".format(key, val) for key, val in argdict.items()])
  call create(${errorvar}$, ${arglist}$)
  return
#:enddef


#:def throw_error_class(errovar, errorclass, **argdict)
  #:set arglist = ", ".join(["{}={}".format(key, val) for key, val in argdict.items()])
  block
    type(${errorclass}$), allocatable :: ${errovar}$_typed
    call create(${errovar}$_typed, ${arglist}$)
    call move_alloc(${errovar}$_typed, ${errovar}$)
    return
  end block
#:enddef

#:endmute
